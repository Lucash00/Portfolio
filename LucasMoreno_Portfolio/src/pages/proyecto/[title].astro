---
import Layout from "../../layouts/Layout.astro";
import TitleComponent from "../../components/Utils/Font/Title.astro";
import TitleContent from "../../components/Utils/Font/TitleContent.astro";
import TextContent from "../../components/Utils/Font/TextContent.jsx";
import Card from "../../components/Utils/Card/Card.astro";
import { projects } from "../../data/projects"; // Importamos todos los proyectos
import SectionToggle from "../../components/Utils/SectionToggle.jsx";
import Slider from "../../components/Utils/Slider/Slider.jsx"; // Importa el componente Slider
import LinkList from "../../components/Utils/Link/Link";

export async function getStaticPaths() {
  return projects.map((project) => ({
    params: { title: encodeURIComponent(project.title.replace(/\s+/g, "-")) },
  }));
}

const params = Astro.params;

if (!params.title) {
  throw new Error("No title parameter provided");
}

const decodedTitle = decodeURIComponent(params.title);
const project = projects.find(
  (p) =>
    p.title.toLowerCase() === decodedTitle.replace(/-/g, " ").toLowerCase(),
);

if (!project) {
  throw new Error(`Project with title '${decodedTitle}' not found`);
}

// Crear un arreglo de secciones dinámicamente
const sections = [
  { name: "Objetivo", content: project.objective },
  {
    name: "Equipo",
    content: project.team
      ? project.team.contributors
          ?.map((contributor) => `**${contributor.name}**: ${contributor.role}`)
          .join("\n\n")
      : "",
  },
  {
    name: "Proceso",
    content: project.developmentProcess
      ? `Metodología ${project.developmentProcess.methodology}`
      : "",
  },
];
---

<Layout title={`Proyecto: ${project.title}`}>
  <main>
    <TitleComponent title={project.title} logo={project.logo} />

    <Card>
      <!-- Contenido de la media -->
      {
        project.media && project.media.length > 0 && (
          <div class="z-10 mb-4 col-span-2 col-start-1">
            {/* Usar SliderM para dispositivos pequeños y Slider normal para más grandes */}
            <Slider client:load images={project.media} />
          </div>
        )
      }

      <div class="py-2 col-span-2 col-start-1">
        {
          (project.links?.website || project.links?.codeRepository) && (
            <LinkList
              links={[
                ...(project.links?.website
                  ? [{ url: project.links.website, name: "Ver Proyecto" }]
                  : []),
                ...(project.links?.codeRepository
                  ? [{ url: project.links.codeRepository, name: "Ver Código" }]
                  : []),
              ]}
            />
          )
        }
      </div>
      <!-- Tags Utilizadas -->
      {
        project.tags && (
          <div class="sm:col-span-2 md:col-span-2 col-start-1 ">
            <TitleContent title="Tags" />
            <ul class="flex flex-wrap gap-2 mb-4">
              {project.tags.map((tag) => (
                <li class="px-2 py-1 bg-gray-300 rounded-full text-gray-900 text-sm">
                  {tag}
                </li>
              ))}
            </ul>
          </div>
        )
      }
      
      <!-- Descripción -->
      <div class="pt-4 col-span-2 col-start-1 border-spacing-y-10 border-y-2 border-gray-300">
        <TitleContent title={project.titleJob} />
        {/* Mostrar company, startDate y endDate si existe provider */}
        {
          project.company ? (
            <p class="mb-2 text-gray-400">
              {project.company} / {project.startDate} - {project.endDate}
            </p>
          ) : (
            <p class="mb-2 text-gray-400">
              Autodidacta / {project.startDate} - {project.endDate}
            </p>
          )
        }
        <TextContent content={project.description} />
      </div>

      <!-- Secciones (SectionToggle) -->
      <div
        class="py-2 sm:col-span-2 sm:col-start-1 md:col-span-2 md:col-start-1 "
      >
        <SectionToggle client:visible sections={sections} />
      </div>
    </Card>
  </main>
</Layout>
