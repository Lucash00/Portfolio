---
import IconCarousel from "./IconCarousel.astro";
---

<astro>
  <div
    class="my-10 z-0 grid grid-flow-col grid-rows-6 sm:grid-rows-3 md:grid-rows-2 lg:grid-rows-1 carousel-container ladosTransparentes"
    ref:"sliderRef"
  >
    <div class="carousel-track" ref:"trackRef">
      <IconCarousel alt="HTML" src="/assets/html.svg" />
      <IconCarousel alt="CSS" src="/assets/css.svg" />
      <IconCarousel alt="TailwindCSS" src="/assets/tailwind.svg" />
      <IconCarousel alt="JavaScript" src="/assets/js.svg" />
      <IconCarousel alt="TypeScript" src="/assets/typescript.svg" />
      <IconCarousel alt="Python" src="/assets/python.svg" />
      <IconCarousel alt="Swift" src="/assets/swift.svg" />
      <IconCarousel alt="React" src="/assets/react.svg" />
      <IconCarousel alt="Astro" src="/assets/astro.svg" />
      <IconCarousel alt="Angular" src="/assets/angular.svg" />
      <IconCarousel alt="Django" src="/assets/django.svg" />
      <IconCarousel alt="ASP.NET" src="/assets/aspnet.svg" />
      <IconCarousel alt="Java" src="/assets/java.svg" />
      <IconCarousel alt="Spring" src="/assets/spring.svg" />
      <IconCarousel alt="NodeJs" src="/assets/nodejs.svg" />
      <IconCarousel alt="PHP" src="/assets/php.svg" />
      <IconCarousel alt="Linux" src="/assets/linux.svg" />
      <IconCarousel alt="Nginx" src="/assets/nginx.svg" />
      <IconCarousel alt="Xampp" src="/assets/xampp.svg" />
      <IconCarousel alt="Wordpress" src="/assets/wordpress.svg" />
      <IconCarousel alt="Joomla" src="/assets/joomla.svg" />
      <IconCarousel alt="SQL" src="/assets/sql.svg" />
      <IconCarousel alt="XLS" src="/assets/xls.svg" />
      <IconCarousel alt="XML" src="/assets/xml.svg" />
      <IconCarousel alt="Github" src="/assets/github.svg" />
      <IconCarousel alt="Gitlab" src="/assets/gitlab.svg" />
    </div>
  </div>
  <div
    id="tooltip"
    class="tooltip hidden fixed sm:text-xxs md:text-sm lg:text-base sm:p-2 md:p-3 bg-gradient-to-b from-[#161616] via-[#202020] to-transparent tracking-wide text-gray-100 rounded-t-2xl transform -translate-x-1/2 left-1/2 sm:-mt-4 md:-mt-8"
  >
  </div>

  <style>
    .ladosTransparentes {
      mask-image: linear-gradient(to right, transparent, white, transparent);
    }
    .carousel-container {
      overflow-x: hidden;
      width: 100%;
    }

    .carousel-track {
      display: flex;
      cursor: grab;
      user-select: none;
    }

    .active {
      cursor: grabbing;
    }

    .tooltip {
      pointer-events: none;
      opacity: 1;
    }

    .hidden {
      opacity: 0;
    }
  </style>

  <script>
    let intervalId: ReturnType<typeof setInterval> | null = null;
    let slider: HTMLElement | null;
    let track: HTMLElement | null;
    let tooltip: HTMLElement | null;
    let scrollAmount = 1;
    let startX = 0;
    let scrollLeft = 0;
    let isMouseDown = false;
    let isMouseOverSlider = false;
    let isUserInteracting = false;
    let interactionTimeout: ReturnType<typeof setTimeout> | null = null;

    window.addEventListener("DOMContentLoaded", () => {
      slider = document.querySelector(".carousel-container");
      track = document.querySelector(".carousel-track");
      tooltip = document.getElementById("tooltip");
      if (slider && track && tooltip) {
        cloneElements();
        intervalId = setInterval(moveCarousel, 13);
        slider.addEventListener("mousedown", handleMouseDown);
        slider.addEventListener("mouseup", handleMouseUp);
        slider.addEventListener("mousemove", handleMouseMove);
        slider.addEventListener("touchstart", handleTouchStart);
        slider.addEventListener("touchend", handleTouchEnd);
        slider.addEventListener("touchmove", handleTouchMove);
        slider.addEventListener("mouseenter", handleMouseEnter);
        slider.addEventListener("mouseleave", handleMouseLeave);
        track.addEventListener("mouseleave", handleMouseLeaveTrack);
        track.addEventListener("mouseover", handleMouseOver);
        track.addEventListener("mouseout", handleMouseOut);
      }
    });

    // Función para ajustar la velocidad de desplazamiento
    function adjustScrollSpeed() {
      const width = window.innerWidth;

      // Ajustar scrollAmount según el tamaño de la pantalla
      if (width <= 768) {
        // Dispositivos móviles (tamaño de pantalla pequeña)
        scrollAmount = 1; // Movimiento más lento
      } else if (width <= 1024) {
        // Tablets
        scrollAmount = 1; // Velocidad estándar
      } else {
        // Desktop
        scrollAmount = 2; // Movimiento más rápido
      }
    }

    // Llamar a la función cada vez que se redimensione la ventana
    window.addEventListener("resize", adjustScrollSpeed);

    // Llamar a la función al cargar la página para establecer la velocidad inicial
    adjustScrollSpeed();

    function moveCarousel() {
      if (!isMouseDown && !isMouseOverSlider && slider && track) {
        slider.scrollLeft += scrollAmount;
        const halfScrollWidth = track.scrollWidth / 2;
        if (slider.scrollLeft >= halfScrollWidth) {
          slider.scrollLeft = slider.scrollLeft % halfScrollWidth;
        }
      }
    }

    function cloneElements() {
      const items = Array.from(track!.children) as HTMLElement[];
      for (let i = 0; i < items.length; i++) {
        const clone = items[i].cloneNode(true) as HTMLElement;
        track!.appendChild(clone);
      }
      // Forzar scroll al inicio exacto
      slider!.scrollLeft = 0;
    }

    function handleMouseDown(e: MouseEvent) {
      isMouseDown = true;
      slider!.classList.add("active");
      startX = e.pageX - slider!.offsetLeft;
      scrollLeft = slider!.scrollLeft;
    }

    function handleMouseUp() {
      if (isMouseDown) {
        isMouseDown = false;
        slider!.classList.remove("active");
        // Ajustar scroll para evitar salto
        const halfScrollWidth = track!.scrollWidth / 2;
        slider!.scrollLeft = slider!.scrollLeft % halfScrollWidth;
      }
    }

    function handleMouseMove(e: MouseEvent) {
      if (isMouseDown) {
        e.preventDefault();
        const x = e.pageX - slider!.offsetLeft;
        const walk = (x - startX) * 1.2;
        slider!.scrollLeft = scrollLeft - walk;
        tooltip!.classList.add("hidden");

        markUserInteracting();
      }
    }

    function handleTouchStart(e: TouchEvent) {
      isMouseDown = true;
      slider!.classList.add("active");
      startX = e.touches[0].pageX - slider!.offsetLeft;
      scrollLeft = slider!.scrollLeft;
      tooltip!.classList.add("hidden"); // Ocultar el tooltip al iniciar el arrastre
    }

    function handleTouchEnd() {
      if (isMouseDown) {
        isMouseDown = false;
        slider!.classList.remove("active");
        // Ajustar scroll para evitar salto
        const halfScrollWidth = track!.scrollWidth / 2;
        slider!.scrollLeft = slider!.scrollLeft % halfScrollWidth;

        // Reanudar desplazamiento automático
        markUserInteracting();
      }
    }

    function handleTouchMove(e: TouchEvent) {
      if (isMouseDown) {
        e.preventDefault();
        const x = e.touches[0].pageX - slider!.offsetLeft;
        const screenWidth = window.innerWidth;
        const multiplier = screenWidth <= 768 ? 1.0 : 3;
        const walk = (x - startX) * multiplier;
        slider!.scrollLeft = scrollLeft - walk;

        markUserInteracting();
      }
    }

    function markUserInteracting() {
      isUserInteracting = true;
      if (interactionTimeout) clearTimeout(interactionTimeout);
      if (intervalId) {
        clearInterval(intervalId); // Detener el intervalo actual
      }
      interactionTimeout = setTimeout(() => {
        isUserInteracting = false;
        if (!isUserInteracting) {
          // Reiniciar el intervalo con la velocidad correcta
          intervalId = setInterval(moveCarousel, 13);
        }
      }, 100); // espera 1.5s desde la última interacción antes de reactivar auto-scroll
    }

    function handleMouseEnter() {
      isMouseOverSlider = true;
    }

    function handleMouseLeave() {
      isMouseOverSlider = false;
    }

    function handleMouseLeaveTrack() {
      if (isMouseDown) {
        handleMouseUp();
      }
    }

    function handleMouseOver(e: MouseEvent) {
      const target = e.target as HTMLElement;
      if (target && target.tagName === "IMG") {
        const img = target as HTMLImageElement;
        const rect = img.getBoundingClientRect();
        tooltip!.textContent = img.alt;
        tooltip!.style.left = `${rect.left + rect.width / 2 + window.scrollX}px`;
        tooltip!.style.top = `${rect.top + window.scrollY - 10}px`;
        tooltip!.classList.remove("hidden");
      }
    }

    function handleMouseOut(e: MouseEvent) {
      const target = e.target as HTMLElement;
      if (target && target.tagName === "IMG") {
        tooltip!.classList.add("hidden");
      }
    }
  </script>
</astro>
