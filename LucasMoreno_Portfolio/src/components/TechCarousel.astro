---
import IconCarousel from "./IconCarousel.astro";
---

<astro>
  <div
    class="mx-auto z-50 grid grid-flow-col grid-rows-6 sm:grid-rows-3 md:grid-rows-2 lg:grid-rows-1 carousel-container"
    ref:"sliderRef"
  >
    <div class="carousel-track" ref:"trackRef">
      <IconCarousel alt="HTML Logo" src="src/assets/html.svg" />
      <IconCarousel alt="CSS Logo" src="src/assets/css.svg" />
      <IconCarousel alt="JS Logo" src="src/assets/js.svg" />
      <IconCarousel alt="Python Logo" src="src/assets/python.svg" />
      <IconCarousel alt="Swift Logo" src="src/assets/swift.svg" />
      <IconCarousel alt="React Logo" src="src/assets/react.svg" />
      <IconCarousel alt="Django Logo" src="src/assets/django.svg" />
      <IconCarousel alt="Angular Logo" src="src/assets/angular.svg" />
      <IconCarousel alt="Java Logo" src="src/assets/java.svg" />
      <IconCarousel alt="PHP Logo" src="src/assets/php.svg" />
      <IconCarousel alt="Linux Logo" src="src/assets/linux.svg" />
      <IconCarousel alt="Nginx Logo" src="src/assets/nginx.svg" />
      <IconCarousel alt="XLS Logo" src="src/assets/xls.svg" />
      <IconCarousel alt="XML Logo" src="src/assets/xml.svg" />
    </div>
  </div>

  <style>
    .carousel-container {
      overflow-x: hidden;
      width: 100%;
      position: relative;
    }

    .carousel-track {
      display: flex;
      cursor: grab;
      user-select: none;
    }

    .carousel-item {
      flex: 0 0 auto;
      margin-right: 10px;
    }

    .active {
      cursor: grabbing;
    }
  </style>

<script>
  let intervalId = null;
  let slider: HTMLElement | null;
  let track: HTMLElement | null;
  let scrollAmount = 1;
  let startX = 0;
  let scrollLeft = 0;
  let isMouseDown = false;
  let isMouseOverSlider = false;

  window.addEventListener("DOMContentLoaded", () => {
    slider = document.querySelector('.carousel-container');
    track = document.querySelector('.carousel-track');
    if (slider && track) {
      cloneElements();
      intervalId = setInterval(moveCarousel, 10);
      slider.addEventListener("mousedown", handleMouseDown);
      slider.addEventListener("mouseup", handleMouseUp);
      slider.addEventListener("mousemove", handleMouseMove);
      slider.addEventListener("touchstart", handleTouchStart);
      slider.addEventListener("touchend", handleTouchEnd);
      slider.addEventListener("touchmove", handleTouchMove);
      slider.addEventListener("mouseenter", handleMouseEnter);
      slider.addEventListener("mouseleave", handleMouseLeave);
    }
  });

  function moveCarousel() {
    if (!isMouseDown && !isMouseOverSlider && slider) {
      slider.scrollLeft += scrollAmount;
      if (slider.scrollLeft >= track!.scrollWidth / 2) {
        slider.scrollLeft = 0;
      }
    }
  }

  function cloneElements() {
    const items = Array.from(track!.children) as HTMLElement[];
    const trackWidth = (track as HTMLElement).offsetWidth;
    const itemWidth = (items[0] as HTMLElement).offsetWidth;
    const itemsPerViewport = Math.ceil(trackWidth / itemWidth);
    let currentWidth = 0;
    for (let i = 0; i < itemsPerViewport; i++) {
      const item = items[i % items.length].cloneNode(true);
      track!.appendChild(item);
      currentWidth +=
        itemWidth +
        parseInt(window.getComputedStyle(item as HTMLElement).marginRight || "0");
    }
  }

  function handleMouseDown(e: MouseEvent) {
    isMouseDown = true;
    slider!.classList.add("active");
    startX = e.pageX - slider!.offsetLeft;
    scrollLeft = slider!.scrollLeft;
  }

  function handleMouseUp() {
    isMouseDown = false;
    slider!.classList.remove("active");
  }

  function handleMouseMove(e: MouseEvent) {
    if (isMouseDown) {
      e.preventDefault();
      const x = e.pageX - slider!.offsetLeft;
      const walk = (x - startX) * 3;
      slider!.scrollLeft = scrollLeft - walk;
    }
  }

  function handleTouchStart(e: TouchEvent) {
    isMouseDown = true;
    slider!.classList.add("active");
    startX = e.touches[0].pageX - slider!.offsetLeft;
    scrollLeft = slider!.scrollLeft;
  }

  function handleTouchEnd() {
    isMouseDown = false;
    slider!.classList.remove("active");
  }

  function handleTouchMove(e: TouchEvent) {
    if (isMouseDown) {
      e.preventDefault();
      const x = e.touches[0].pageX - slider!.offsetLeft;
      const walk = (x - startX) * 3;
      slider!.scrollLeft = scrollLeft - walk;
    }
  }

  function handleMouseEnter() {
    isMouseOverSlider = true;
  }

  function handleMouseLeave() {
    isMouseOverSlider = false;
  }
</script>
</astro>
